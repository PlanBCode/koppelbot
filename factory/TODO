TODO

search/display
- update search so it only searches content, not propertynames
- add search to test  ./xyz "/fruit?search=green"
- fix this: http://localhost:8000/ui/item/fact?search=jaar
- fix this: http://localhost:8000/ui/item/fact?search=$search

fix sign-up flow
- show errors if create/login fails
- auto fill in username after sign up

RBAC
- access not merged, but overwritten for properties

- display: deactivate/hide edit rows for properties you're not allowed to see
- edit: deactivate/hide rows for properties you're not allowed to edit
- view: deactivate/hide rows for properties you're not allowed to read

remove/change facts in timeline dynamically

deleteButton -> get a popup to confirm

test using "de bevoegde instanties" data

timeline : ensure labels do not overlap and do not go outside wrapper
- constraints
- - no overlap
- - div width/height (or stretch to fit)
- - minimize distance to node

timeline
- create new item by clicking on the line (display date on hover)

- add unique setting to array

replace createTmpContentToValidate in render.js with ability to validate subData for types
- validateContent(content, settings, subPropertyPath)

validate @ Item.patch to set status to faulty

type toString function for sorting

refresh state more efficiently: subscription

display
- filter content before passing to display functions

array/object
- delete values

drag&drop: als er een reference input veld is dan worden die entities sleepbaar (array for multiple)

validateContent -> return messages why it's not valid

testing
- - add multiple samples for editing
- - create sample entity by adding all samples

add dot notation: /source/*/file.content,id
- property paths -> property tree's

filtering & searching :
- implement full blown boolean expressions
- optimization: if the query connector requests match the actual requests get them together with the rest
- - otherwise get them first, analyze and use to get the ids

Put @ Backend default values properties gebruiken voor niet toegevoegde props

werkend maken:
- xyz.ui({uri:'/source?content==default',display:'create'});
- xyz.ui({uri:'$type',display:'create'});

cli: read inputs if searching for /fruit/$id

provide display settings schema in json form
- - generate auto documentation for displays
- - create a ui interface to generate a ui interface

- provide type settings
- - generate auto documentation for types
- - build ui interfaces for creating entity definitions

Connector_path : een hele directory als entity met subproperties zien

hide private connector settings or better only expose specified ones

"_" -> root is labeled as string (because no type)	: string(connector:{....},...)
        would be nice to give this a root type :)

improve the plugin structure
- package.json to define a plugin
- sandbox plugin access
- ini_set("open_basedir", "/mag/alleen/hier/bij/komen:/of/tot/hier/");
- https://stackoverflow.com/questions/44854059/php-ini-set-open-basedir-has-no-effect

file type: viewer
- odt https://viewerjs.org/ uses an odt lib that can be extracted
- office docx, pptx, xlsx  (microsoft/google api: require public access

custom view html definition:
"label": {"signature":{"id":"id","color":"color","title":"title"}},"view":"<span style='color:$color;'>$title</span>"}
"url": {"type":"string","view":"<a href='$'>$</a>}

proper file locks

$variable usage in /ui endpoints (generate inputs to update)
navigation in /ui endpoints for (sub) property names

maybe entity inheritance